#!/usr/bin/env python3
import sys
import base64
import binascii
import re
import argparse
from PIL import Image
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box
from rich.markup import escape
from multiprocessing import Pool, cpu_count

console = Console()

def decode_bits(img, step, mode, direction, channel, bit_depth=1, bit_offset=0):
    pixels = list(img.getdata())
    width, height = img.size
    bits = ''

    def get_pixel_index(i):
        if direction == "yatay":
            return i
        elif direction == "dikey":
            x = i % width
            y = i // width
            if y >= height:
                return None
            return y + x * height if x * height + y < len(pixels) else None

    for i in range(0, len(pixels), step + 1):
        idx = get_pixel_index(i)
        if idx is None or idx >= len(pixels):
            break

        pixel = pixels[idx]
        r, g, b = pixel[:3]
        a = pixel[3] if len(pixel) == 4 else 0

        def extract_bits(value):
            if mode == "msb":
                return format((value >> (8 - bit_depth)) & ((1 << bit_depth) - 1), f'0{bit_depth}b')
            else:
                return format(value & ((1 << bit_depth) - 1), f'0{bit_depth}b')

        if channel == "r":
            bits += extract_bits(r)
        elif channel == "g":
            bits += extract_bits(g)
        elif channel == "b":
            bits += extract_bits(b)
        elif channel == "a":
            bits += extract_bits(a)
        elif channel == "rgb":
            bits += extract_bits(r) + extract_bits(g) + extract_bits(b)
        elif channel == "rgba":
            bits += extract_bits(r) + extract_bits(g) + extract_bits(b) + extract_bits(a)

    return bits[bit_offset:]

def bits_to_ascii(bits):
    chars = []
    for i in range(0, len(bits), 8):
        byte = bits[i:i+8]
        if len(byte) < 8:
            break
        chars.append(chr(int(byte, 2)))
    return ''.join(chars)

def bits_to_hex(bits):
    hex_chars = []
    for i in range(0, len(bits), 8):
        byte = bits[i:i+8]
        if len(byte) < 8:
            break
        hex_chars.append(f"{int(byte, 2):02x}")
    return ''.join(hex_chars)

def safe_base64_decode(data):
    try:
        padding = '=' * (-len(data) % 4)
        decoded = base64.b64decode(data + padding).decode(errors='ignore')
        return decoded
    except Exception:
        return "[Base64 decode basarisiz]"

def safe_hex_decode(data):
    try:
        return bytes.fromhex(data).decode(errors='ignore')
    except Exception:
        return "[Hex decode basarisiz]"

def find_base64_like_strings(text):
    pattern = r'([A-Za-z0-9+/=]{8,})'
    return re.findall(pattern, text)

def analyze_step(img, step, flag_prefix, mode, direction, channel, bit_depth, bit_offset=0):
    bits = decode_bits(img, step, mode, direction, channel, bit_depth, bit_offset)
    ascii_text = bits_to_ascii(bits)
    base64_decoded = safe_base64_decode(ascii_text)
    hex_decoded = safe_hex_decode(ascii_text)

    table = Table(
        title=f"[bold cyan]{mode.upper()} Tarama[/bold cyan] • "
              f"[yellow]Aralık:[/yellow] {step + 1} • "
              f"[green]Yön:[/green] {direction.upper()} • "
              f"[magenta]Kanal:[/magenta] {channel.upper()} • "
              f"[blue]Bit Derinliği:[/blue] {bit_depth} • "
              f"[red]Offset:[/red] {bit_offset}",
        box=box.SIMPLE
    )
    table.add_column("Alan", style="bold cyan")
    table.add_column("İçerik", style="white")

    def sanitize(s):
        return escape(''.join(c if 32 <= ord(c) <= 126 else '.' for c in s))

    table.add_row("[1] İlk 256 Bit", sanitize(bits[:256]))
    table.add_row("[2] ASCII", sanitize(ascii_text[:200]))
    table.add_row("[3] Base64 Decode", sanitize(base64_decoded[:200]))
    table.add_row("[4] Hex Decode", sanitize(hex_decoded[:200]))

    console.print(table)

    for text in [ascii_text, base64_decoded]:
        if flag_prefix + "{" in text:
            flag = text[text.find(flag_prefix + "{"):text.find("}", text.find(flag_prefix + "{")) + 1]
            return flag, True

    base64_candidates = find_base64_like_strings(ascii_text)
    for candidate in base64_candidates:
        decoded = safe_base64_decode(candidate)
        if flag_prefix + "{" in decoded:
            flag = decoded[decoded.find(flag_prefix + "{"):decoded.find("}", decoded.find(flag_prefix + "{")) + 1]
            console.print(Panel(
                f"🎯 Base64 adayı bulundu ve çözüldü:\n[bold yellow]{escape(candidate)}[/bold yellow]\n[green]{escape(decoded)}[/green]",
                title="Flag Bulundu (Base64 Adayı)",
                style="green"
            ))
            return flag, True

    return None, False

def auto_worker(args):
    step, mode, direction, channel, bit_depth, image_path, flag_prefix, bit_offset = args
    img = Image.open(image_path)
    return analyze_step(img, step, flag_prefix, mode, direction, channel, bit_depth, bit_offset)

def run_auto(image_path, flag_prefix, step_range, auto_mode, max_bit_depth, bit_offset):
    directions = ["yatay", "dikey"]
    channels = ["r", "g", "b", "a", "rgb", "rgba"]
    bit_depths = [i for i in range(1, max_bit_depth + 1)]
    modes = {
        "fullauto": ["lsb", "msb"],
        "lsbauto": ["lsb"],
        "msbauto": ["msb"]
    }.get(auto_mode, [])

    tasks = []
    for mode in modes:
        for direction in directions:
            for channel in channels:
                for bit_depth in bit_depths:
                    for step in range(step_range):
                        tasks.append((step, mode, direction, channel, bit_depth, image_path, flag_prefix, bit_offset))

    console.print(Panel(f"[cyan]Auto Mod: {auto_mode} • Max Bit Derinliği: {max_bit_depth} • Kombinasyon: {len(tasks)} • Çekirdek: {cpu_count()}[/cyan]"))

    with Pool(cpu_count()) as pool:
        for result in pool.imap_unordered(auto_worker, tasks):
            flag, found = result
            if found:
                console.print(Panel(f"✅ Flag bulundu: [bold yellow]{flag}[/bold yellow]", title="Sonuç", style="bold green"))
                pool.terminate()
                return True

    console.print(Panel("❌ Flag bulunamadı (auto mod).", style="red", title="Tamamlanamadı"))
    return False

def run_auto_with_offset_brute(image_path, flag_prefix, step_range, auto_mode, max_bit_depth, offset_brute):
    for offset in range(offset_brute + 1):
        console.print(Panel(f"[yellow]Offset BruteForce → {offset}[/yellow]", title="Brute Offset", style="bold magenta"))
        found = run_auto(image_path, flag_prefix, step_range, auto_mode, max_bit_depth, offset)
        if found:
            console.print(Panel(f"[bold green]Offset Brute durduruldu. Başarılı offset: {offset}[/bold green]", title="Başarılı Offset", style="green"))
            break

def format_bits_pretty(bits, group=8):
    return ' '.join(bits[i:i+group] for i in range(0, len(bits), group))

def format_ascii_pretty(ascii_data, width=16):
    result = ""
    for i in range(0, len(ascii_data), width):
        line = ascii_data[i:i+width]
        result += f"{i:08x}  {''.join(c if 32 <= ord(c) <= 126 else '.' for c in line)}\n"
    return result

def format_hex_pretty(hex_data, width=16):
    result = ""
    for i in range(0, len(hex_data), width * 2):
        chunk = hex_data[i:i + width * 2]
        hex_line = ' '.join(chunk[j:j+2] for j in range(0, len(chunk), 2))
        result += f"{i//2:08x}  {hex_line}\n"
    return result

def manual_export_bits(img, mode, direction, channel, bit_depth, bit_offset):
    bits = decode_bits(img, 0, mode, direction, channel, bit_depth, bit_offset)
    ascii_content = bits_to_ascii(bits)
    hex_content = bits_to_hex(bits)
    with open("manual_export.txt", "w", encoding="utf-8") as f:
        f.write("=== BİT VERİSİ ===\n")
        f.write(format_bits_pretty(bits) + "\n\n")
        f.write("=== ASCII (16'lık bloklar) ===\n")
        f.write(format_ascii_pretty(ascii_content) + "\n\n")
        f.write("=== HEX (16'lık bloklar) ===\n")
        f.write(format_hex_pretty(hex_content) + "\n")
    console.print(Panel("[blue]Manuel analiz çıktısı oluşturuldu → manual_export.txt", title="Export Tamamlandı"))

def main(image_path, flag_prefix, mode, step_range, direction, channel, bit_depth,
         auto_mode, max_bit_depth, bit_offset, manual_export, offset_brute):

    if manual_export:
        img = Image.open(image_path)
        manual_export_bits(img, mode, direction, channel, bit_depth, bit_offset)
        return

    if offset_brute is not None:
        run_auto_with_offset_brute(image_path, flag_prefix, step_range, auto_mode, max_bit_depth, offset_brute)
    elif auto_mode:
        run_auto(image_path, flag_prefix, step_range, auto_mode, max_bit_depth, bit_offset)
    else:
        img = Image.open(image_path)
        for step in range(step_range):
            flag, found = analyze_step(img, step, flag_prefix, mode, direction, channel, bit_depth, bit_offset)
            if found:
                console.print(Panel(f"✅ Tüm tarama durduruldu. Flag bulundu! [bold yellow]{flag}[/bold yellow]", title="Sonuç", style="bold green"))
                return
        console.print(Panel("❌ Hiçbir aralıkta flag bulunamadı.", title="Tamamlanamadı", style="red"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Stego Decoder (LSB / MSB) • by Eren Gezen")
    parser.add_argument("image", help="Girdi resmi (örn: image.png)")
    parser.add_argument("-p", "--prefix", required=True, help="Flag başlığı (örn: CTF, picoCTF, flag)")
    parser.add_argument("-m", "--mode", choices=["lsb", "msb"], default="lsb", help="Tarama modu: lsb veya msb (varsayılan: lsb)")
    parser.add_argument("--step-range", type=int, default=300, help="Kaç farklı piksel aralığı taransın (varsayılan: 300)")
    parser.add_argument("-d", "--direction", choices=["yatay", "dikey"], default="yatay", help="Tarama yönü")
    parser.add_argument("-c", "--channel", choices=["r", "g", "b", "a", "rgb", "rgba"], default="rgb", help="Kanal(lar)")
    parser.add_argument("--bit-depth", type=int, default=1, choices=[1, 2, 3, 4], help="Bit derinliği")
    parser.add_argument("--auto", choices=["fullauto", "lsbauto", "msbauto"], help="Otomatik mod: fullauto, lsbauto, msbauto")
    parser.add_argument("--max-bit-depth", type=int, default=4, help="Oto mod için maksimum bit derinliği (varsayılan: 4)")
    parser.add_argument("--offset", type=int, default=0, help="Başlangıç bit offseti (varsayılan: 0)")
    parser.add_argument("--manual-export", action="store_true", help="Tüm piksellerin bitlerini ve ASCII/HEX karşılıklarını dışa aktar")
    parser.add_argument("--offset-brute", type=int, help="Offset brute-force: 0'dan başlayarak verilen değere kadar otomatik dene")

    args = parser.parse_args()

    if args.offset and args.offset_brute is not None:
        console.print(Panel("[red]--offset ve --offset-brute aynı anda kullanılamaz![/red]", title="HATA", style="red"))
        sys.exit(1)

    main(args.image, args.prefix, args.mode, args.step_range, args.direction, args.channel,
         args.bit_depth, args.auto, args.max_bit_depth, args.offset, args.manual_export, args.offset_brute)
